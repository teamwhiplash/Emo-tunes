package org.tunes.dto;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.http.*;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestClientException;
import org.springframework.web.client.RestTemplate;

import java.util.Map;

/**
 * Service that talks to the Spotify “Audio‑Features” endpoint and maps the response
 * to a plain DTO.  All boiler‑plate getters / setters are generated by Lombok.
 */
@Service
@Slf4j
public class Song_Metadata {

    private final RestTemplate restTemplate = new RestTemplate();
    private static final String BASE_URL = "https://api.spotify.com/v1/audio-features/";

    /* --------------------------------------------------------------------- *
     *  DTO – Lombok generates getters, setters, toString, equals & hashCode *
     * --------------------------------------------------------------------- */
    @Data                     // @Getter + @Setter + @EqualsAndHashCode + @ToString
    @NoArgsConstructor        // needed for Jackson / manual mapping
    @AllArgsConstructor       // handy for tests or future Builder usage
    public static class SongMetadataDTO {
        private double danceability;
        private double energy;
        private double valence;
        private double tempo;
        private double acousticness;
        private double instrumentalness;
        private double liveness;
        private double speechiness;
    }

    /** Simple unchecked wrapper so callers can react to a *specific* problem. */
    public static class SongMetadataException extends RuntimeException {
        public SongMetadataException(String msg) { super(msg); }
        public SongMetadataException(String msg, Throwable cause) { super(msg, cause); }
    }

    /**
     * Retrieves audio‑features for a Spotify track.
     *
     * @param accessToken a valid bearer token
     * @param trackId     Spotify track identifier
     * @return DTO populated with the numeric audio‑features
     * @throws SongMetadataException on any communication / mapping error
     */
    public SongMetadataDTO getMetadata(String accessToken, String trackId) {
        String url = BASE_URL + trackId;

        HttpHeaders headers = new HttpHeaders();
        headers.setBearerAuth(accessToken);                 // same as “Authorization: Bearer …”
        HttpEntity<Void> request = new HttpEntity<>(headers);

        try {
            ResponseEntity<Map<String, Object>> response = restTemplate.exchange(
                    url,
                    HttpMethod.GET,
                    request,
                    new ParameterizedTypeReference<>() {}
            );

            if (!response.getStatusCode().is2xxSuccessful()) {
                String msg = String.format("Spotify API returned %s for track %s",
                        response.getStatusCode(), trackId);
                log.error(msg);
                throw new SongMetadataException(msg);
            }

            Map<String, Object> body = response.getBody();
            if (body == null || body.isEmpty()) {
                String msg = "Empty body received from Spotify for track " + trackId;
                log.error(msg);
                throw new SongMetadataException(msg);
            }

            // ----- map the JSON values to the DTO (Lombok removes the boiler‑plate) -----
            SongMetadataDTO dto = new SongMetadataDTO();
            dto.setDanceability (toDouble(body, "danceability"));
            dto.setEnergy (toDouble(body, "energy"));
            dto.setValence (toDouble(body, "valence"));
            dto.setTempo (toDouble(body, "tempo"));
            dto.setAcousticness (toDouble(body, "acousticness"));
            dto.setInstrumentalness (toDouble(body, "instrumentalness"));
            dto.setLiveness (toDouble(body, "liveness"));
            dto.setSpeechiness (toDouble(body, "speechiness"));

            return dto;

        } catch (RestClientException e) {
            // RestTemplate specific errors (connection, timeout, etc.)
            String msg = "Failed to call Spotify audio‑features endpoint";
            log.error(msg, e);
            throw new SongMetadataException(msg, e);
        } catch (ClassCastException | IllegalArgumentException e) {
            // Unexpected payload shape – safe‑guard the cast to Number
            String msg = "Malformed numeric value in Spotify response";
            log.error(msg, e);
            throw new SongMetadataException(msg, e);
        }
    }

    /** Helper – extracts a double from the map and throws a clear exception if missing. */
    private static double toDouble(Map<String, Object> map, String key) {
        Object raw = map.get(key);
        if (raw == null) {
            String msg = String.format("Missing required field \"%s\" in Spotify response", key);
            throw new SongMetadataException(msg);
        }
        if (!(raw instanceof Number)) {
            String msg = String.format("Field \"%s\" is not numeric: %s", key, raw);
            throw new SongMetadataException(msg);
        }
        return ((Number) raw).doubleValue();
    }
}
